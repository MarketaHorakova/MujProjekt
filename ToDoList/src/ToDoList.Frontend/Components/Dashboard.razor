@using ToDoList.Frontend.Views
@using ToDoList.Frontend.Clients
@inject IToDoItemsClient ToDoItemsClient
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@page "/Dashboard"

<h1>Dashboard</h1>

<table class="table table-hover mt-5">
    <thead class="table-dark">
        <th>Id</th>
        <th>Name</th>
        <th>Description</th>
        <th>Completed</th>
        <th>Category</th>
        <th>Actions</th>
    </thead>
    <tbody>
        @if (toDoItems is null)
        {
            <p>Nacitam...</p>
        }

        @if (toDoItems is not null)
        {
            @foreach (var toDoItem in toDoItems)
            {
                var rowClass = toDoItem.IsCompleted ? "table-success" : "table-secondary";
                <tr class="@rowClass">
                    <td>@toDoItem.ToDoItemId</td>
                    <td>@toDoItem.Name</td>
                    <td>@toDoItem.Description</td>
                    <td>@toDoItem.IsCompleted</td>
                    <td>@toDoItem.Category</td>
                    <td><button class="btn btn-primary" @onclick="() => EditItem(toDoItem)"><i class="bi bi-pencil-square"></i>
                            Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteItem(toDoItem.ToDoItemId)"><i
                                class="bi bi-trash"></i> Delete</button>
                        <button class="btn btn-success" @onclick="() => DoneItem(toDoItem.ToDoItemId)"><i
                                class="bi bi-check"></i> Done</button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<button class="btn btn-secondary" @onclick="OrderById">Seradit Podle Id</button>
<button class="btn btn-secondary" @onclick="OrderByName">Seradit Podle Jmena</button>



@code
{
    protected override async Task OnInitializedAsync()
    {
        toDoItems = await ToDoItemsClient.ReadItemsAsync();
    }

    private List<ToDoItemView>? toDoItems;

    public void OrderByName()
    {
        toDoItems = toDoItems?.OrderBy(item => item.Name).ToList();
    }
    public void OrderById()
    {
        toDoItems = toDoItems?.OrderBy(item => item.ToDoItemId).ToList();
    }
    private string ascDesc { get; set; }

    public void OrderByDescription()
    {
        if (ascDesc == "asc")
        {
            toDoItems = toDoItems.OrderBy(d => d.Description).ToList();
        }
        else
        {
            toDoItems = toDoItems.OrderByDescending(d => d.Description).ToList();
        }

    }

    public void OrderByIsCompleted()
    {
        if (ascDesc == "asc")
        {
            toDoItems = toDoItems.OrderBy(b => b.IsCompleted).ToList();
        }
        else
        {
            toDoItems = toDoItems.OrderByDescending(b => b.IsCompleted).ToList();
        }
    }

    public void EditItem(ToDoItemView toDoItem)
    {
        NavigationManager.NavigateTo($"editToDoItem/{toDoItem.ToDoItemId}");
    }

    public async Task DeleteItem(int toDoItemId)
    {
        await ToDoItemsClient.DeleteItemAsync(new ToDoItemView { ToDoItemId = toDoItemId });
        toDoItems = await ToDoItemsClient.ReadItemsAsync(); // Refresh the list after deletion
    }

    public async Task DoneItem(int toDoItemId)
    {
        var item = await ToDoItemsClient.ReadItemByIdAsync(toDoItemId);
        item.IsCompleted = !item.IsCompleted;
        await ToDoItemsClient.UpdateItemAsync(item);
        toDoItems = await ToDoItemsClient.ReadItemsAsync(); // Refresh the list after update
    }

}
